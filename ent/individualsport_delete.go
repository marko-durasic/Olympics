// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marko-durasic/olympics/ent/individualsport"
	"github.com/marko-durasic/olympics/ent/predicate"
)

// IndividualSportDelete is the builder for deleting a IndividualSport entity.
type IndividualSportDelete struct {
	config
	hooks    []Hook
	mutation *IndividualSportMutation
}

// Where appends a list predicates to the IndividualSportDelete builder.
func (isd *IndividualSportDelete) Where(ps ...predicate.IndividualSport) *IndividualSportDelete {
	isd.mutation.Where(ps...)
	return isd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (isd *IndividualSportDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, isd.sqlExec, isd.mutation, isd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (isd *IndividualSportDelete) ExecX(ctx context.Context) int {
	n, err := isd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (isd *IndividualSportDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(individualsport.Table, sqlgraph.NewFieldSpec(individualsport.FieldID, field.TypeInt))
	if ps := isd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, isd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	isd.mutation.done = true
	return affected, err
}

// IndividualSportDeleteOne is the builder for deleting a single IndividualSport entity.
type IndividualSportDeleteOne struct {
	isd *IndividualSportDelete
}

// Where appends a list predicates to the IndividualSportDelete builder.
func (isdo *IndividualSportDeleteOne) Where(ps ...predicate.IndividualSport) *IndividualSportDeleteOne {
	isdo.isd.mutation.Where(ps...)
	return isdo
}

// Exec executes the deletion query.
func (isdo *IndividualSportDeleteOne) Exec(ctx context.Context) error {
	n, err := isdo.isd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{individualsport.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (isdo *IndividualSportDeleteOne) ExecX(ctx context.Context) {
	if err := isdo.Exec(ctx); err != nil {
		panic(err)
	}
}
