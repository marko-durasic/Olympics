// Code generated by ent, DO NOT EDIT.

package individualsport

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the individualsport type in the database.
	Label = "individual_sport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldSport holds the string denoting the sport field in the database.
	FieldSport = "sport"
	// FieldGold holds the string denoting the gold field in the database.
	FieldGold = "gold"
	// FieldSilver holds the string denoting the silver field in the database.
	FieldSilver = "silver"
	// FieldBronze holds the string denoting the bronze field in the database.
	FieldBronze = "bronze"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldTotalScore holds the string denoting the total_score field in the database.
	FieldTotalScore = "total_score"
	// FieldPopulation holds the string denoting the population field in the database.
	FieldPopulation = "population"
	// FieldPerCapita holds the string denoting the per_capita field in the database.
	FieldPerCapita = "per_capita"
	// Table holds the table name of the individualsport in the database.
	Table = "individual_sports"
)

// Columns holds all SQL columns for individualsport fields.
var Columns = []string{
	FieldID,
	FieldCountry,
	FieldSport,
	FieldGold,
	FieldSilver,
	FieldBronze,
	FieldPoints,
	FieldTotalScore,
	FieldPopulation,
	FieldPerCapita,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IndividualSport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// BySport orders the results by the sport field.
func BySport(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSport, opts...).ToFunc()
}

// ByGold orders the results by the gold field.
func ByGold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGold, opts...).ToFunc()
}

// BySilver orders the results by the silver field.
func BySilver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSilver, opts...).ToFunc()
}

// ByBronze orders the results by the bronze field.
func ByBronze(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBronze, opts...).ToFunc()
}

// ByPoints orders the results by the points field.
func ByPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoints, opts...).ToFunc()
}

// ByTotalScore orders the results by the total_score field.
func ByTotalScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalScore, opts...).ToFunc()
}

// ByPopulation orders the results by the population field.
func ByPopulation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopulation, opts...).ToFunc()
}

// ByPerCapita orders the results by the per_capita field.
func ByPerCapita(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPerCapita, opts...).ToFunc()
}
