// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marko-durasic/olympics/ent/combinedsport"
)

// CombinedSportCreate is the builder for creating a CombinedSport entity.
type CombinedSportCreate struct {
	config
	mutation *CombinedSportMutation
	hooks    []Hook
}

// SetCountry sets the "country" field.
func (csc *CombinedSportCreate) SetCountry(s string) *CombinedSportCreate {
	csc.mutation.SetCountry(s)
	return csc
}

// SetSport sets the "sport" field.
func (csc *CombinedSportCreate) SetSport(s string) *CombinedSportCreate {
	csc.mutation.SetSport(s)
	return csc
}

// SetGold sets the "gold" field.
func (csc *CombinedSportCreate) SetGold(i int) *CombinedSportCreate {
	csc.mutation.SetGold(i)
	return csc
}

// SetSilver sets the "silver" field.
func (csc *CombinedSportCreate) SetSilver(i int) *CombinedSportCreate {
	csc.mutation.SetSilver(i)
	return csc
}

// SetBronze sets the "bronze" field.
func (csc *CombinedSportCreate) SetBronze(i int) *CombinedSportCreate {
	csc.mutation.SetBronze(i)
	return csc
}

// SetPoints sets the "points" field.
func (csc *CombinedSportCreate) SetPoints(i int) *CombinedSportCreate {
	csc.mutation.SetPoints(i)
	return csc
}

// SetTotalScore sets the "total_score" field.
func (csc *CombinedSportCreate) SetTotalScore(i int) *CombinedSportCreate {
	csc.mutation.SetTotalScore(i)
	return csc
}

// SetPopulation sets the "population" field.
func (csc *CombinedSportCreate) SetPopulation(i int) *CombinedSportCreate {
	csc.mutation.SetPopulation(i)
	return csc
}

// SetPerCapita sets the "per_capita" field.
func (csc *CombinedSportCreate) SetPerCapita(f float64) *CombinedSportCreate {
	csc.mutation.SetPerCapita(f)
	return csc
}

// Mutation returns the CombinedSportMutation object of the builder.
func (csc *CombinedSportCreate) Mutation() *CombinedSportMutation {
	return csc.mutation
}

// Save creates the CombinedSport in the database.
func (csc *CombinedSportCreate) Save(ctx context.Context) (*CombinedSport, error) {
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CombinedSportCreate) SaveX(ctx context.Context) *CombinedSport {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CombinedSportCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CombinedSportCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CombinedSportCreate) check() error {
	if _, ok := csc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "CombinedSport.country"`)}
	}
	if _, ok := csc.mutation.Sport(); !ok {
		return &ValidationError{Name: "sport", err: errors.New(`ent: missing required field "CombinedSport.sport"`)}
	}
	if _, ok := csc.mutation.Gold(); !ok {
		return &ValidationError{Name: "gold", err: errors.New(`ent: missing required field "CombinedSport.gold"`)}
	}
	if _, ok := csc.mutation.Silver(); !ok {
		return &ValidationError{Name: "silver", err: errors.New(`ent: missing required field "CombinedSport.silver"`)}
	}
	if _, ok := csc.mutation.Bronze(); !ok {
		return &ValidationError{Name: "bronze", err: errors.New(`ent: missing required field "CombinedSport.bronze"`)}
	}
	if _, ok := csc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "CombinedSport.points"`)}
	}
	if _, ok := csc.mutation.TotalScore(); !ok {
		return &ValidationError{Name: "total_score", err: errors.New(`ent: missing required field "CombinedSport.total_score"`)}
	}
	if _, ok := csc.mutation.Population(); !ok {
		return &ValidationError{Name: "population", err: errors.New(`ent: missing required field "CombinedSport.population"`)}
	}
	if _, ok := csc.mutation.PerCapita(); !ok {
		return &ValidationError{Name: "per_capita", err: errors.New(`ent: missing required field "CombinedSport.per_capita"`)}
	}
	return nil
}

func (csc *CombinedSportCreate) sqlSave(ctx context.Context) (*CombinedSport, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CombinedSportCreate) createSpec() (*CombinedSport, *sqlgraph.CreateSpec) {
	var (
		_node = &CombinedSport{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(combinedsport.Table, sqlgraph.NewFieldSpec(combinedsport.FieldID, field.TypeInt))
	)
	if value, ok := csc.mutation.Country(); ok {
		_spec.SetField(combinedsport.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := csc.mutation.Sport(); ok {
		_spec.SetField(combinedsport.FieldSport, field.TypeString, value)
		_node.Sport = value
	}
	if value, ok := csc.mutation.Gold(); ok {
		_spec.SetField(combinedsport.FieldGold, field.TypeInt, value)
		_node.Gold = value
	}
	if value, ok := csc.mutation.Silver(); ok {
		_spec.SetField(combinedsport.FieldSilver, field.TypeInt, value)
		_node.Silver = value
	}
	if value, ok := csc.mutation.Bronze(); ok {
		_spec.SetField(combinedsport.FieldBronze, field.TypeInt, value)
		_node.Bronze = value
	}
	if value, ok := csc.mutation.Points(); ok {
		_spec.SetField(combinedsport.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if value, ok := csc.mutation.TotalScore(); ok {
		_spec.SetField(combinedsport.FieldTotalScore, field.TypeInt, value)
		_node.TotalScore = value
	}
	if value, ok := csc.mutation.Population(); ok {
		_spec.SetField(combinedsport.FieldPopulation, field.TypeInt, value)
		_node.Population = value
	}
	if value, ok := csc.mutation.PerCapita(); ok {
		_spec.SetField(combinedsport.FieldPerCapita, field.TypeFloat64, value)
		_node.PerCapita = value
	}
	return _node, _spec
}

// CombinedSportCreateBulk is the builder for creating many CombinedSport entities in bulk.
type CombinedSportCreateBulk struct {
	config
	err      error
	builders []*CombinedSportCreate
}

// Save creates the CombinedSport entities in the database.
func (cscb *CombinedSportCreateBulk) Save(ctx context.Context) ([]*CombinedSport, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CombinedSport, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CombinedSportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CombinedSportCreateBulk) SaveX(ctx context.Context) []*CombinedSport {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CombinedSportCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CombinedSportCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
