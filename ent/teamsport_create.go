// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marko-durasic/olympics/ent/teamsport"
)

// TeamSportCreate is the builder for creating a TeamSport entity.
type TeamSportCreate struct {
	config
	mutation *TeamSportMutation
	hooks    []Hook
}

// SetCountry sets the "country" field.
func (tsc *TeamSportCreate) SetCountry(s string) *TeamSportCreate {
	tsc.mutation.SetCountry(s)
	return tsc
}

// SetSport sets the "sport" field.
func (tsc *TeamSportCreate) SetSport(s string) *TeamSportCreate {
	tsc.mutation.SetSport(s)
	return tsc
}

// SetGold sets the "gold" field.
func (tsc *TeamSportCreate) SetGold(i int) *TeamSportCreate {
	tsc.mutation.SetGold(i)
	return tsc
}

// SetSilver sets the "silver" field.
func (tsc *TeamSportCreate) SetSilver(i int) *TeamSportCreate {
	tsc.mutation.SetSilver(i)
	return tsc
}

// SetBronze sets the "bronze" field.
func (tsc *TeamSportCreate) SetBronze(i int) *TeamSportCreate {
	tsc.mutation.SetBronze(i)
	return tsc
}

// SetPoints sets the "points" field.
func (tsc *TeamSportCreate) SetPoints(i int) *TeamSportCreate {
	tsc.mutation.SetPoints(i)
	return tsc
}

// SetTotalScore sets the "total_score" field.
func (tsc *TeamSportCreate) SetTotalScore(i int) *TeamSportCreate {
	tsc.mutation.SetTotalScore(i)
	return tsc
}

// SetPopulation sets the "population" field.
func (tsc *TeamSportCreate) SetPopulation(i int) *TeamSportCreate {
	tsc.mutation.SetPopulation(i)
	return tsc
}

// SetPerCapita sets the "per_capita" field.
func (tsc *TeamSportCreate) SetPerCapita(f float64) *TeamSportCreate {
	tsc.mutation.SetPerCapita(f)
	return tsc
}

// Mutation returns the TeamSportMutation object of the builder.
func (tsc *TeamSportCreate) Mutation() *TeamSportMutation {
	return tsc.mutation
}

// Save creates the TeamSport in the database.
func (tsc *TeamSportCreate) Save(ctx context.Context) (*TeamSport, error) {
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TeamSportCreate) SaveX(ctx context.Context) *TeamSport {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TeamSportCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TeamSportCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TeamSportCreate) check() error {
	if _, ok := tsc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "TeamSport.country"`)}
	}
	if _, ok := tsc.mutation.Sport(); !ok {
		return &ValidationError{Name: "sport", err: errors.New(`ent: missing required field "TeamSport.sport"`)}
	}
	if _, ok := tsc.mutation.Gold(); !ok {
		return &ValidationError{Name: "gold", err: errors.New(`ent: missing required field "TeamSport.gold"`)}
	}
	if _, ok := tsc.mutation.Silver(); !ok {
		return &ValidationError{Name: "silver", err: errors.New(`ent: missing required field "TeamSport.silver"`)}
	}
	if _, ok := tsc.mutation.Bronze(); !ok {
		return &ValidationError{Name: "bronze", err: errors.New(`ent: missing required field "TeamSport.bronze"`)}
	}
	if _, ok := tsc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "TeamSport.points"`)}
	}
	if _, ok := tsc.mutation.TotalScore(); !ok {
		return &ValidationError{Name: "total_score", err: errors.New(`ent: missing required field "TeamSport.total_score"`)}
	}
	if _, ok := tsc.mutation.Population(); !ok {
		return &ValidationError{Name: "population", err: errors.New(`ent: missing required field "TeamSport.population"`)}
	}
	if _, ok := tsc.mutation.PerCapita(); !ok {
		return &ValidationError{Name: "per_capita", err: errors.New(`ent: missing required field "TeamSport.per_capita"`)}
	}
	return nil
}

func (tsc *TeamSportCreate) sqlSave(ctx context.Context) (*TeamSport, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TeamSportCreate) createSpec() (*TeamSport, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamSport{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(teamsport.Table, sqlgraph.NewFieldSpec(teamsport.FieldID, field.TypeInt))
	)
	if value, ok := tsc.mutation.Country(); ok {
		_spec.SetField(teamsport.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := tsc.mutation.Sport(); ok {
		_spec.SetField(teamsport.FieldSport, field.TypeString, value)
		_node.Sport = value
	}
	if value, ok := tsc.mutation.Gold(); ok {
		_spec.SetField(teamsport.FieldGold, field.TypeInt, value)
		_node.Gold = value
	}
	if value, ok := tsc.mutation.Silver(); ok {
		_spec.SetField(teamsport.FieldSilver, field.TypeInt, value)
		_node.Silver = value
	}
	if value, ok := tsc.mutation.Bronze(); ok {
		_spec.SetField(teamsport.FieldBronze, field.TypeInt, value)
		_node.Bronze = value
	}
	if value, ok := tsc.mutation.Points(); ok {
		_spec.SetField(teamsport.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if value, ok := tsc.mutation.TotalScore(); ok {
		_spec.SetField(teamsport.FieldTotalScore, field.TypeInt, value)
		_node.TotalScore = value
	}
	if value, ok := tsc.mutation.Population(); ok {
		_spec.SetField(teamsport.FieldPopulation, field.TypeInt, value)
		_node.Population = value
	}
	if value, ok := tsc.mutation.PerCapita(); ok {
		_spec.SetField(teamsport.FieldPerCapita, field.TypeFloat64, value)
		_node.PerCapita = value
	}
	return _node, _spec
}

// TeamSportCreateBulk is the builder for creating many TeamSport entities in bulk.
type TeamSportCreateBulk struct {
	config
	err      error
	builders []*TeamSportCreate
}

// Save creates the TeamSport entities in the database.
func (tscb *TeamSportCreateBulk) Save(ctx context.Context) ([]*TeamSport, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TeamSport, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamSportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TeamSportCreateBulk) SaveX(ctx context.Context) []*TeamSport {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TeamSportCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TeamSportCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
