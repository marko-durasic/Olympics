// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/marko-durasic/olympics/ent/teamsport"
)

// TeamSport is the model entity for the TeamSport schema.
type TeamSport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Sport holds the value of the "sport" field.
	Sport string `json:"sport,omitempty"`
	// Gold holds the value of the "gold" field.
	Gold int `json:"gold,omitempty"`
	// Silver holds the value of the "silver" field.
	Silver int `json:"silver,omitempty"`
	// Bronze holds the value of the "bronze" field.
	Bronze int `json:"bronze,omitempty"`
	// Points holds the value of the "points" field.
	Points int `json:"points,omitempty"`
	// TotalScore holds the value of the "total_score" field.
	TotalScore int `json:"total_score,omitempty"`
	// Population holds the value of the "population" field.
	Population int `json:"population,omitempty"`
	// PerCapita holds the value of the "per_capita" field.
	PerCapita    float64 `json:"per_capita,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeamSport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case teamsport.FieldPerCapita:
			values[i] = new(sql.NullFloat64)
		case teamsport.FieldID, teamsport.FieldGold, teamsport.FieldSilver, teamsport.FieldBronze, teamsport.FieldPoints, teamsport.FieldTotalScore, teamsport.FieldPopulation:
			values[i] = new(sql.NullInt64)
		case teamsport.FieldCountry, teamsport.FieldSport:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeamSport fields.
func (ts *TeamSport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teamsport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case teamsport.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				ts.Country = value.String
			}
		case teamsport.FieldSport:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sport", values[i])
			} else if value.Valid {
				ts.Sport = value.String
			}
		case teamsport.FieldGold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gold", values[i])
			} else if value.Valid {
				ts.Gold = int(value.Int64)
			}
		case teamsport.FieldSilver:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field silver", values[i])
			} else if value.Valid {
				ts.Silver = int(value.Int64)
			}
		case teamsport.FieldBronze:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bronze", values[i])
			} else if value.Valid {
				ts.Bronze = int(value.Int64)
			}
		case teamsport.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				ts.Points = int(value.Int64)
			}
		case teamsport.FieldTotalScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[i])
			} else if value.Valid {
				ts.TotalScore = int(value.Int64)
			}
		case teamsport.FieldPopulation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field population", values[i])
			} else if value.Valid {
				ts.Population = int(value.Int64)
			}
		case teamsport.FieldPerCapita:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field per_capita", values[i])
			} else if value.Valid {
				ts.PerCapita = value.Float64
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TeamSport.
// This includes values selected through modifiers, order, etc.
func (ts *TeamSport) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// Update returns a builder for updating this TeamSport.
// Note that you need to call TeamSport.Unwrap() before calling this method if this TeamSport
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TeamSport) Update() *TeamSportUpdateOne {
	return NewTeamSportClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TeamSport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TeamSport) Unwrap() *TeamSport {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeamSport is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TeamSport) String() string {
	var builder strings.Builder
	builder.WriteString("TeamSport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("country=")
	builder.WriteString(ts.Country)
	builder.WriteString(", ")
	builder.WriteString("sport=")
	builder.WriteString(ts.Sport)
	builder.WriteString(", ")
	builder.WriteString("gold=")
	builder.WriteString(fmt.Sprintf("%v", ts.Gold))
	builder.WriteString(", ")
	builder.WriteString("silver=")
	builder.WriteString(fmt.Sprintf("%v", ts.Silver))
	builder.WriteString(", ")
	builder.WriteString("bronze=")
	builder.WriteString(fmt.Sprintf("%v", ts.Bronze))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", ts.Points))
	builder.WriteString(", ")
	builder.WriteString("total_score=")
	builder.WriteString(fmt.Sprintf("%v", ts.TotalScore))
	builder.WriteString(", ")
	builder.WriteString("population=")
	builder.WriteString(fmt.Sprintf("%v", ts.Population))
	builder.WriteString(", ")
	builder.WriteString("per_capita=")
	builder.WriteString(fmt.Sprintf("%v", ts.PerCapita))
	builder.WriteByte(')')
	return builder.String()
}

// TeamSports is a parsable slice of TeamSport.
type TeamSports []*TeamSport
