// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marko-durasic/olympics/ent/individualsport"
	"github.com/marko-durasic/olympics/ent/predicate"
)

// IndividualSportUpdate is the builder for updating IndividualSport entities.
type IndividualSportUpdate struct {
	config
	hooks    []Hook
	mutation *IndividualSportMutation
}

// Where appends a list predicates to the IndividualSportUpdate builder.
func (isu *IndividualSportUpdate) Where(ps ...predicate.IndividualSport) *IndividualSportUpdate {
	isu.mutation.Where(ps...)
	return isu
}

// SetCountry sets the "country" field.
func (isu *IndividualSportUpdate) SetCountry(s string) *IndividualSportUpdate {
	isu.mutation.SetCountry(s)
	return isu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillableCountry(s *string) *IndividualSportUpdate {
	if s != nil {
		isu.SetCountry(*s)
	}
	return isu
}

// SetSport sets the "sport" field.
func (isu *IndividualSportUpdate) SetSport(s string) *IndividualSportUpdate {
	isu.mutation.SetSport(s)
	return isu
}

// SetNillableSport sets the "sport" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillableSport(s *string) *IndividualSportUpdate {
	if s != nil {
		isu.SetSport(*s)
	}
	return isu
}

// SetGold sets the "gold" field.
func (isu *IndividualSportUpdate) SetGold(i int) *IndividualSportUpdate {
	isu.mutation.ResetGold()
	isu.mutation.SetGold(i)
	return isu
}

// SetNillableGold sets the "gold" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillableGold(i *int) *IndividualSportUpdate {
	if i != nil {
		isu.SetGold(*i)
	}
	return isu
}

// AddGold adds i to the "gold" field.
func (isu *IndividualSportUpdate) AddGold(i int) *IndividualSportUpdate {
	isu.mutation.AddGold(i)
	return isu
}

// SetSilver sets the "silver" field.
func (isu *IndividualSportUpdate) SetSilver(i int) *IndividualSportUpdate {
	isu.mutation.ResetSilver()
	isu.mutation.SetSilver(i)
	return isu
}

// SetNillableSilver sets the "silver" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillableSilver(i *int) *IndividualSportUpdate {
	if i != nil {
		isu.SetSilver(*i)
	}
	return isu
}

// AddSilver adds i to the "silver" field.
func (isu *IndividualSportUpdate) AddSilver(i int) *IndividualSportUpdate {
	isu.mutation.AddSilver(i)
	return isu
}

// SetBronze sets the "bronze" field.
func (isu *IndividualSportUpdate) SetBronze(i int) *IndividualSportUpdate {
	isu.mutation.ResetBronze()
	isu.mutation.SetBronze(i)
	return isu
}

// SetNillableBronze sets the "bronze" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillableBronze(i *int) *IndividualSportUpdate {
	if i != nil {
		isu.SetBronze(*i)
	}
	return isu
}

// AddBronze adds i to the "bronze" field.
func (isu *IndividualSportUpdate) AddBronze(i int) *IndividualSportUpdate {
	isu.mutation.AddBronze(i)
	return isu
}

// SetPoints sets the "points" field.
func (isu *IndividualSportUpdate) SetPoints(i int) *IndividualSportUpdate {
	isu.mutation.ResetPoints()
	isu.mutation.SetPoints(i)
	return isu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillablePoints(i *int) *IndividualSportUpdate {
	if i != nil {
		isu.SetPoints(*i)
	}
	return isu
}

// AddPoints adds i to the "points" field.
func (isu *IndividualSportUpdate) AddPoints(i int) *IndividualSportUpdate {
	isu.mutation.AddPoints(i)
	return isu
}

// SetTotalScore sets the "total_score" field.
func (isu *IndividualSportUpdate) SetTotalScore(i int) *IndividualSportUpdate {
	isu.mutation.ResetTotalScore()
	isu.mutation.SetTotalScore(i)
	return isu
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillableTotalScore(i *int) *IndividualSportUpdate {
	if i != nil {
		isu.SetTotalScore(*i)
	}
	return isu
}

// AddTotalScore adds i to the "total_score" field.
func (isu *IndividualSportUpdate) AddTotalScore(i int) *IndividualSportUpdate {
	isu.mutation.AddTotalScore(i)
	return isu
}

// SetPopulation sets the "population" field.
func (isu *IndividualSportUpdate) SetPopulation(i int) *IndividualSportUpdate {
	isu.mutation.ResetPopulation()
	isu.mutation.SetPopulation(i)
	return isu
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillablePopulation(i *int) *IndividualSportUpdate {
	if i != nil {
		isu.SetPopulation(*i)
	}
	return isu
}

// AddPopulation adds i to the "population" field.
func (isu *IndividualSportUpdate) AddPopulation(i int) *IndividualSportUpdate {
	isu.mutation.AddPopulation(i)
	return isu
}

// SetPerCapita sets the "per_capita" field.
func (isu *IndividualSportUpdate) SetPerCapita(f float64) *IndividualSportUpdate {
	isu.mutation.ResetPerCapita()
	isu.mutation.SetPerCapita(f)
	return isu
}

// SetNillablePerCapita sets the "per_capita" field if the given value is not nil.
func (isu *IndividualSportUpdate) SetNillablePerCapita(f *float64) *IndividualSportUpdate {
	if f != nil {
		isu.SetPerCapita(*f)
	}
	return isu
}

// AddPerCapita adds f to the "per_capita" field.
func (isu *IndividualSportUpdate) AddPerCapita(f float64) *IndividualSportUpdate {
	isu.mutation.AddPerCapita(f)
	return isu
}

// Mutation returns the IndividualSportMutation object of the builder.
func (isu *IndividualSportUpdate) Mutation() *IndividualSportMutation {
	return isu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isu *IndividualSportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, isu.sqlSave, isu.mutation, isu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *IndividualSportUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *IndividualSportUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *IndividualSportUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (isu *IndividualSportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(individualsport.Table, individualsport.Columns, sqlgraph.NewFieldSpec(individualsport.FieldID, field.TypeInt))
	if ps := isu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isu.mutation.Country(); ok {
		_spec.SetField(individualsport.FieldCountry, field.TypeString, value)
	}
	if value, ok := isu.mutation.Sport(); ok {
		_spec.SetField(individualsport.FieldSport, field.TypeString, value)
	}
	if value, ok := isu.mutation.Gold(); ok {
		_spec.SetField(individualsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedGold(); ok {
		_spec.AddField(individualsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := isu.mutation.Silver(); ok {
		_spec.SetField(individualsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedSilver(); ok {
		_spec.AddField(individualsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := isu.mutation.Bronze(); ok {
		_spec.SetField(individualsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedBronze(); ok {
		_spec.AddField(individualsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := isu.mutation.Points(); ok {
		_spec.SetField(individualsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedPoints(); ok {
		_spec.AddField(individualsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := isu.mutation.TotalScore(); ok {
		_spec.SetField(individualsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedTotalScore(); ok {
		_spec.AddField(individualsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := isu.mutation.Population(); ok {
		_spec.SetField(individualsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedPopulation(); ok {
		_spec.AddField(individualsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := isu.mutation.PerCapita(); ok {
		_spec.SetField(individualsport.FieldPerCapita, field.TypeFloat64, value)
	}
	if value, ok := isu.mutation.AddedPerCapita(); ok {
		_spec.AddField(individualsport.FieldPerCapita, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{individualsport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	isu.mutation.done = true
	return n, nil
}

// IndividualSportUpdateOne is the builder for updating a single IndividualSport entity.
type IndividualSportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IndividualSportMutation
}

// SetCountry sets the "country" field.
func (isuo *IndividualSportUpdateOne) SetCountry(s string) *IndividualSportUpdateOne {
	isuo.mutation.SetCountry(s)
	return isuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillableCountry(s *string) *IndividualSportUpdateOne {
	if s != nil {
		isuo.SetCountry(*s)
	}
	return isuo
}

// SetSport sets the "sport" field.
func (isuo *IndividualSportUpdateOne) SetSport(s string) *IndividualSportUpdateOne {
	isuo.mutation.SetSport(s)
	return isuo
}

// SetNillableSport sets the "sport" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillableSport(s *string) *IndividualSportUpdateOne {
	if s != nil {
		isuo.SetSport(*s)
	}
	return isuo
}

// SetGold sets the "gold" field.
func (isuo *IndividualSportUpdateOne) SetGold(i int) *IndividualSportUpdateOne {
	isuo.mutation.ResetGold()
	isuo.mutation.SetGold(i)
	return isuo
}

// SetNillableGold sets the "gold" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillableGold(i *int) *IndividualSportUpdateOne {
	if i != nil {
		isuo.SetGold(*i)
	}
	return isuo
}

// AddGold adds i to the "gold" field.
func (isuo *IndividualSportUpdateOne) AddGold(i int) *IndividualSportUpdateOne {
	isuo.mutation.AddGold(i)
	return isuo
}

// SetSilver sets the "silver" field.
func (isuo *IndividualSportUpdateOne) SetSilver(i int) *IndividualSportUpdateOne {
	isuo.mutation.ResetSilver()
	isuo.mutation.SetSilver(i)
	return isuo
}

// SetNillableSilver sets the "silver" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillableSilver(i *int) *IndividualSportUpdateOne {
	if i != nil {
		isuo.SetSilver(*i)
	}
	return isuo
}

// AddSilver adds i to the "silver" field.
func (isuo *IndividualSportUpdateOne) AddSilver(i int) *IndividualSportUpdateOne {
	isuo.mutation.AddSilver(i)
	return isuo
}

// SetBronze sets the "bronze" field.
func (isuo *IndividualSportUpdateOne) SetBronze(i int) *IndividualSportUpdateOne {
	isuo.mutation.ResetBronze()
	isuo.mutation.SetBronze(i)
	return isuo
}

// SetNillableBronze sets the "bronze" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillableBronze(i *int) *IndividualSportUpdateOne {
	if i != nil {
		isuo.SetBronze(*i)
	}
	return isuo
}

// AddBronze adds i to the "bronze" field.
func (isuo *IndividualSportUpdateOne) AddBronze(i int) *IndividualSportUpdateOne {
	isuo.mutation.AddBronze(i)
	return isuo
}

// SetPoints sets the "points" field.
func (isuo *IndividualSportUpdateOne) SetPoints(i int) *IndividualSportUpdateOne {
	isuo.mutation.ResetPoints()
	isuo.mutation.SetPoints(i)
	return isuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillablePoints(i *int) *IndividualSportUpdateOne {
	if i != nil {
		isuo.SetPoints(*i)
	}
	return isuo
}

// AddPoints adds i to the "points" field.
func (isuo *IndividualSportUpdateOne) AddPoints(i int) *IndividualSportUpdateOne {
	isuo.mutation.AddPoints(i)
	return isuo
}

// SetTotalScore sets the "total_score" field.
func (isuo *IndividualSportUpdateOne) SetTotalScore(i int) *IndividualSportUpdateOne {
	isuo.mutation.ResetTotalScore()
	isuo.mutation.SetTotalScore(i)
	return isuo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillableTotalScore(i *int) *IndividualSportUpdateOne {
	if i != nil {
		isuo.SetTotalScore(*i)
	}
	return isuo
}

// AddTotalScore adds i to the "total_score" field.
func (isuo *IndividualSportUpdateOne) AddTotalScore(i int) *IndividualSportUpdateOne {
	isuo.mutation.AddTotalScore(i)
	return isuo
}

// SetPopulation sets the "population" field.
func (isuo *IndividualSportUpdateOne) SetPopulation(i int) *IndividualSportUpdateOne {
	isuo.mutation.ResetPopulation()
	isuo.mutation.SetPopulation(i)
	return isuo
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillablePopulation(i *int) *IndividualSportUpdateOne {
	if i != nil {
		isuo.SetPopulation(*i)
	}
	return isuo
}

// AddPopulation adds i to the "population" field.
func (isuo *IndividualSportUpdateOne) AddPopulation(i int) *IndividualSportUpdateOne {
	isuo.mutation.AddPopulation(i)
	return isuo
}

// SetPerCapita sets the "per_capita" field.
func (isuo *IndividualSportUpdateOne) SetPerCapita(f float64) *IndividualSportUpdateOne {
	isuo.mutation.ResetPerCapita()
	isuo.mutation.SetPerCapita(f)
	return isuo
}

// SetNillablePerCapita sets the "per_capita" field if the given value is not nil.
func (isuo *IndividualSportUpdateOne) SetNillablePerCapita(f *float64) *IndividualSportUpdateOne {
	if f != nil {
		isuo.SetPerCapita(*f)
	}
	return isuo
}

// AddPerCapita adds f to the "per_capita" field.
func (isuo *IndividualSportUpdateOne) AddPerCapita(f float64) *IndividualSportUpdateOne {
	isuo.mutation.AddPerCapita(f)
	return isuo
}

// Mutation returns the IndividualSportMutation object of the builder.
func (isuo *IndividualSportUpdateOne) Mutation() *IndividualSportMutation {
	return isuo.mutation
}

// Where appends a list predicates to the IndividualSportUpdate builder.
func (isuo *IndividualSportUpdateOne) Where(ps ...predicate.IndividualSport) *IndividualSportUpdateOne {
	isuo.mutation.Where(ps...)
	return isuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isuo *IndividualSportUpdateOne) Select(field string, fields ...string) *IndividualSportUpdateOne {
	isuo.fields = append([]string{field}, fields...)
	return isuo
}

// Save executes the query and returns the updated IndividualSport entity.
func (isuo *IndividualSportUpdateOne) Save(ctx context.Context) (*IndividualSport, error) {
	return withHooks(ctx, isuo.sqlSave, isuo.mutation, isuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *IndividualSportUpdateOne) SaveX(ctx context.Context) *IndividualSport {
	node, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isuo *IndividualSportUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *IndividualSportUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (isuo *IndividualSportUpdateOne) sqlSave(ctx context.Context) (_node *IndividualSport, err error) {
	_spec := sqlgraph.NewUpdateSpec(individualsport.Table, individualsport.Columns, sqlgraph.NewFieldSpec(individualsport.FieldID, field.TypeInt))
	id, ok := isuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IndividualSport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := isuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, individualsport.FieldID)
		for _, f := range fields {
			if !individualsport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != individualsport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isuo.mutation.Country(); ok {
		_spec.SetField(individualsport.FieldCountry, field.TypeString, value)
	}
	if value, ok := isuo.mutation.Sport(); ok {
		_spec.SetField(individualsport.FieldSport, field.TypeString, value)
	}
	if value, ok := isuo.mutation.Gold(); ok {
		_spec.SetField(individualsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedGold(); ok {
		_spec.AddField(individualsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.Silver(); ok {
		_spec.SetField(individualsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedSilver(); ok {
		_spec.AddField(individualsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.Bronze(); ok {
		_spec.SetField(individualsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedBronze(); ok {
		_spec.AddField(individualsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.Points(); ok {
		_spec.SetField(individualsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedPoints(); ok {
		_spec.AddField(individualsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.TotalScore(); ok {
		_spec.SetField(individualsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedTotalScore(); ok {
		_spec.AddField(individualsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.Population(); ok {
		_spec.SetField(individualsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedPopulation(); ok {
		_spec.AddField(individualsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.PerCapita(); ok {
		_spec.SetField(individualsport.FieldPerCapita, field.TypeFloat64, value)
	}
	if value, ok := isuo.mutation.AddedPerCapita(); ok {
		_spec.AddField(individualsport.FieldPerCapita, field.TypeFloat64, value)
	}
	_node = &IndividualSport{config: isuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{individualsport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	isuo.mutation.done = true
	return _node, nil
}
