// Code generated by ent, DO NOT EDIT.

package combinedsport

import (
	"entgo.io/ent/dialect/sql"
	"github.com/marko-durasic/olympics/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldID, id))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldCountry, v))
}

// Sport applies equality check predicate on the "sport" field. It's identical to SportEQ.
func Sport(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldSport, v))
}

// Gold applies equality check predicate on the "gold" field. It's identical to GoldEQ.
func Gold(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldGold, v))
}

// Silver applies equality check predicate on the "silver" field. It's identical to SilverEQ.
func Silver(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldSilver, v))
}

// Bronze applies equality check predicate on the "bronze" field. It's identical to BronzeEQ.
func Bronze(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldBronze, v))
}

// Points applies equality check predicate on the "points" field. It's identical to PointsEQ.
func Points(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldPoints, v))
}

// TotalScore applies equality check predicate on the "total_score" field. It's identical to TotalScoreEQ.
func TotalScore(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldTotalScore, v))
}

// Population applies equality check predicate on the "population" field. It's identical to PopulationEQ.
func Population(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldPopulation, v))
}

// PerCapita applies equality check predicate on the "per_capita" field. It's identical to PerCapitaEQ.
func PerCapita(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldPerCapita, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldContainsFold(FieldCountry, v))
}

// SportEQ applies the EQ predicate on the "sport" field.
func SportEQ(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldSport, v))
}

// SportNEQ applies the NEQ predicate on the "sport" field.
func SportNEQ(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldSport, v))
}

// SportIn applies the In predicate on the "sport" field.
func SportIn(vs ...string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldSport, vs...))
}

// SportNotIn applies the NotIn predicate on the "sport" field.
func SportNotIn(vs ...string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldSport, vs...))
}

// SportGT applies the GT predicate on the "sport" field.
func SportGT(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldSport, v))
}

// SportGTE applies the GTE predicate on the "sport" field.
func SportGTE(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldSport, v))
}

// SportLT applies the LT predicate on the "sport" field.
func SportLT(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldSport, v))
}

// SportLTE applies the LTE predicate on the "sport" field.
func SportLTE(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldSport, v))
}

// SportContains applies the Contains predicate on the "sport" field.
func SportContains(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldContains(FieldSport, v))
}

// SportHasPrefix applies the HasPrefix predicate on the "sport" field.
func SportHasPrefix(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldHasPrefix(FieldSport, v))
}

// SportHasSuffix applies the HasSuffix predicate on the "sport" field.
func SportHasSuffix(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldHasSuffix(FieldSport, v))
}

// SportEqualFold applies the EqualFold predicate on the "sport" field.
func SportEqualFold(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEqualFold(FieldSport, v))
}

// SportContainsFold applies the ContainsFold predicate on the "sport" field.
func SportContainsFold(v string) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldContainsFold(FieldSport, v))
}

// GoldEQ applies the EQ predicate on the "gold" field.
func GoldEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldGold, v))
}

// GoldNEQ applies the NEQ predicate on the "gold" field.
func GoldNEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldGold, v))
}

// GoldIn applies the In predicate on the "gold" field.
func GoldIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldGold, vs...))
}

// GoldNotIn applies the NotIn predicate on the "gold" field.
func GoldNotIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldGold, vs...))
}

// GoldGT applies the GT predicate on the "gold" field.
func GoldGT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldGold, v))
}

// GoldGTE applies the GTE predicate on the "gold" field.
func GoldGTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldGold, v))
}

// GoldLT applies the LT predicate on the "gold" field.
func GoldLT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldGold, v))
}

// GoldLTE applies the LTE predicate on the "gold" field.
func GoldLTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldGold, v))
}

// SilverEQ applies the EQ predicate on the "silver" field.
func SilverEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldSilver, v))
}

// SilverNEQ applies the NEQ predicate on the "silver" field.
func SilverNEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldSilver, v))
}

// SilverIn applies the In predicate on the "silver" field.
func SilverIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldSilver, vs...))
}

// SilverNotIn applies the NotIn predicate on the "silver" field.
func SilverNotIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldSilver, vs...))
}

// SilverGT applies the GT predicate on the "silver" field.
func SilverGT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldSilver, v))
}

// SilverGTE applies the GTE predicate on the "silver" field.
func SilverGTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldSilver, v))
}

// SilverLT applies the LT predicate on the "silver" field.
func SilverLT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldSilver, v))
}

// SilverLTE applies the LTE predicate on the "silver" field.
func SilverLTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldSilver, v))
}

// BronzeEQ applies the EQ predicate on the "bronze" field.
func BronzeEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldBronze, v))
}

// BronzeNEQ applies the NEQ predicate on the "bronze" field.
func BronzeNEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldBronze, v))
}

// BronzeIn applies the In predicate on the "bronze" field.
func BronzeIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldBronze, vs...))
}

// BronzeNotIn applies the NotIn predicate on the "bronze" field.
func BronzeNotIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldBronze, vs...))
}

// BronzeGT applies the GT predicate on the "bronze" field.
func BronzeGT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldBronze, v))
}

// BronzeGTE applies the GTE predicate on the "bronze" field.
func BronzeGTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldBronze, v))
}

// BronzeLT applies the LT predicate on the "bronze" field.
func BronzeLT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldBronze, v))
}

// BronzeLTE applies the LTE predicate on the "bronze" field.
func BronzeLTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldBronze, v))
}

// PointsEQ applies the EQ predicate on the "points" field.
func PointsEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldPoints, v))
}

// PointsNEQ applies the NEQ predicate on the "points" field.
func PointsNEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldPoints, v))
}

// PointsIn applies the In predicate on the "points" field.
func PointsIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldPoints, vs...))
}

// PointsNotIn applies the NotIn predicate on the "points" field.
func PointsNotIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldPoints, vs...))
}

// PointsGT applies the GT predicate on the "points" field.
func PointsGT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldPoints, v))
}

// PointsGTE applies the GTE predicate on the "points" field.
func PointsGTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldPoints, v))
}

// PointsLT applies the LT predicate on the "points" field.
func PointsLT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldPoints, v))
}

// PointsLTE applies the LTE predicate on the "points" field.
func PointsLTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldPoints, v))
}

// TotalScoreEQ applies the EQ predicate on the "total_score" field.
func TotalScoreEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldTotalScore, v))
}

// TotalScoreNEQ applies the NEQ predicate on the "total_score" field.
func TotalScoreNEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldTotalScore, v))
}

// TotalScoreIn applies the In predicate on the "total_score" field.
func TotalScoreIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldTotalScore, vs...))
}

// TotalScoreNotIn applies the NotIn predicate on the "total_score" field.
func TotalScoreNotIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldTotalScore, vs...))
}

// TotalScoreGT applies the GT predicate on the "total_score" field.
func TotalScoreGT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldTotalScore, v))
}

// TotalScoreGTE applies the GTE predicate on the "total_score" field.
func TotalScoreGTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldTotalScore, v))
}

// TotalScoreLT applies the LT predicate on the "total_score" field.
func TotalScoreLT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldTotalScore, v))
}

// TotalScoreLTE applies the LTE predicate on the "total_score" field.
func TotalScoreLTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldTotalScore, v))
}

// PopulationEQ applies the EQ predicate on the "population" field.
func PopulationEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldPopulation, v))
}

// PopulationNEQ applies the NEQ predicate on the "population" field.
func PopulationNEQ(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldPopulation, v))
}

// PopulationIn applies the In predicate on the "population" field.
func PopulationIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldPopulation, vs...))
}

// PopulationNotIn applies the NotIn predicate on the "population" field.
func PopulationNotIn(vs ...int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldPopulation, vs...))
}

// PopulationGT applies the GT predicate on the "population" field.
func PopulationGT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldPopulation, v))
}

// PopulationGTE applies the GTE predicate on the "population" field.
func PopulationGTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldPopulation, v))
}

// PopulationLT applies the LT predicate on the "population" field.
func PopulationLT(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldPopulation, v))
}

// PopulationLTE applies the LTE predicate on the "population" field.
func PopulationLTE(v int) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldPopulation, v))
}

// PerCapitaEQ applies the EQ predicate on the "per_capita" field.
func PerCapitaEQ(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldEQ(FieldPerCapita, v))
}

// PerCapitaNEQ applies the NEQ predicate on the "per_capita" field.
func PerCapitaNEQ(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNEQ(FieldPerCapita, v))
}

// PerCapitaIn applies the In predicate on the "per_capita" field.
func PerCapitaIn(vs ...float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldIn(FieldPerCapita, vs...))
}

// PerCapitaNotIn applies the NotIn predicate on the "per_capita" field.
func PerCapitaNotIn(vs ...float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldNotIn(FieldPerCapita, vs...))
}

// PerCapitaGT applies the GT predicate on the "per_capita" field.
func PerCapitaGT(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGT(FieldPerCapita, v))
}

// PerCapitaGTE applies the GTE predicate on the "per_capita" field.
func PerCapitaGTE(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldGTE(FieldPerCapita, v))
}

// PerCapitaLT applies the LT predicate on the "per_capita" field.
func PerCapitaLT(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLT(FieldPerCapita, v))
}

// PerCapitaLTE applies the LTE predicate on the "per_capita" field.
func PerCapitaLTE(v float64) predicate.CombinedSport {
	return predicate.CombinedSport(sql.FieldLTE(FieldPerCapita, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CombinedSport) predicate.CombinedSport {
	return predicate.CombinedSport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CombinedSport) predicate.CombinedSport {
	return predicate.CombinedSport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CombinedSport) predicate.CombinedSport {
	return predicate.CombinedSport(sql.NotPredicates(p))
}
