// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marko-durasic/olympics/ent/combinedsport"
	"github.com/marko-durasic/olympics/ent/predicate"
)

// CombinedSportUpdate is the builder for updating CombinedSport entities.
type CombinedSportUpdate struct {
	config
	hooks    []Hook
	mutation *CombinedSportMutation
}

// Where appends a list predicates to the CombinedSportUpdate builder.
func (csu *CombinedSportUpdate) Where(ps ...predicate.CombinedSport) *CombinedSportUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetCountry sets the "country" field.
func (csu *CombinedSportUpdate) SetCountry(s string) *CombinedSportUpdate {
	csu.mutation.SetCountry(s)
	return csu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillableCountry(s *string) *CombinedSportUpdate {
	if s != nil {
		csu.SetCountry(*s)
	}
	return csu
}

// SetSport sets the "sport" field.
func (csu *CombinedSportUpdate) SetSport(s string) *CombinedSportUpdate {
	csu.mutation.SetSport(s)
	return csu
}

// SetNillableSport sets the "sport" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillableSport(s *string) *CombinedSportUpdate {
	if s != nil {
		csu.SetSport(*s)
	}
	return csu
}

// SetGold sets the "gold" field.
func (csu *CombinedSportUpdate) SetGold(i int) *CombinedSportUpdate {
	csu.mutation.ResetGold()
	csu.mutation.SetGold(i)
	return csu
}

// SetNillableGold sets the "gold" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillableGold(i *int) *CombinedSportUpdate {
	if i != nil {
		csu.SetGold(*i)
	}
	return csu
}

// AddGold adds i to the "gold" field.
func (csu *CombinedSportUpdate) AddGold(i int) *CombinedSportUpdate {
	csu.mutation.AddGold(i)
	return csu
}

// SetSilver sets the "silver" field.
func (csu *CombinedSportUpdate) SetSilver(i int) *CombinedSportUpdate {
	csu.mutation.ResetSilver()
	csu.mutation.SetSilver(i)
	return csu
}

// SetNillableSilver sets the "silver" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillableSilver(i *int) *CombinedSportUpdate {
	if i != nil {
		csu.SetSilver(*i)
	}
	return csu
}

// AddSilver adds i to the "silver" field.
func (csu *CombinedSportUpdate) AddSilver(i int) *CombinedSportUpdate {
	csu.mutation.AddSilver(i)
	return csu
}

// SetBronze sets the "bronze" field.
func (csu *CombinedSportUpdate) SetBronze(i int) *CombinedSportUpdate {
	csu.mutation.ResetBronze()
	csu.mutation.SetBronze(i)
	return csu
}

// SetNillableBronze sets the "bronze" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillableBronze(i *int) *CombinedSportUpdate {
	if i != nil {
		csu.SetBronze(*i)
	}
	return csu
}

// AddBronze adds i to the "bronze" field.
func (csu *CombinedSportUpdate) AddBronze(i int) *CombinedSportUpdate {
	csu.mutation.AddBronze(i)
	return csu
}

// SetPoints sets the "points" field.
func (csu *CombinedSportUpdate) SetPoints(i int) *CombinedSportUpdate {
	csu.mutation.ResetPoints()
	csu.mutation.SetPoints(i)
	return csu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillablePoints(i *int) *CombinedSportUpdate {
	if i != nil {
		csu.SetPoints(*i)
	}
	return csu
}

// AddPoints adds i to the "points" field.
func (csu *CombinedSportUpdate) AddPoints(i int) *CombinedSportUpdate {
	csu.mutation.AddPoints(i)
	return csu
}

// SetTotalScore sets the "total_score" field.
func (csu *CombinedSportUpdate) SetTotalScore(i int) *CombinedSportUpdate {
	csu.mutation.ResetTotalScore()
	csu.mutation.SetTotalScore(i)
	return csu
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillableTotalScore(i *int) *CombinedSportUpdate {
	if i != nil {
		csu.SetTotalScore(*i)
	}
	return csu
}

// AddTotalScore adds i to the "total_score" field.
func (csu *CombinedSportUpdate) AddTotalScore(i int) *CombinedSportUpdate {
	csu.mutation.AddTotalScore(i)
	return csu
}

// SetPopulation sets the "population" field.
func (csu *CombinedSportUpdate) SetPopulation(i int) *CombinedSportUpdate {
	csu.mutation.ResetPopulation()
	csu.mutation.SetPopulation(i)
	return csu
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillablePopulation(i *int) *CombinedSportUpdate {
	if i != nil {
		csu.SetPopulation(*i)
	}
	return csu
}

// AddPopulation adds i to the "population" field.
func (csu *CombinedSportUpdate) AddPopulation(i int) *CombinedSportUpdate {
	csu.mutation.AddPopulation(i)
	return csu
}

// SetPerCapita sets the "per_capita" field.
func (csu *CombinedSportUpdate) SetPerCapita(f float64) *CombinedSportUpdate {
	csu.mutation.ResetPerCapita()
	csu.mutation.SetPerCapita(f)
	return csu
}

// SetNillablePerCapita sets the "per_capita" field if the given value is not nil.
func (csu *CombinedSportUpdate) SetNillablePerCapita(f *float64) *CombinedSportUpdate {
	if f != nil {
		csu.SetPerCapita(*f)
	}
	return csu
}

// AddPerCapita adds f to the "per_capita" field.
func (csu *CombinedSportUpdate) AddPerCapita(f float64) *CombinedSportUpdate {
	csu.mutation.AddPerCapita(f)
	return csu
}

// Mutation returns the CombinedSportMutation object of the builder.
func (csu *CombinedSportUpdate) Mutation() *CombinedSportMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CombinedSportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CombinedSportUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CombinedSportUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CombinedSportUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *CombinedSportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(combinedsport.Table, combinedsport.Columns, sqlgraph.NewFieldSpec(combinedsport.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Country(); ok {
		_spec.SetField(combinedsport.FieldCountry, field.TypeString, value)
	}
	if value, ok := csu.mutation.Sport(); ok {
		_spec.SetField(combinedsport.FieldSport, field.TypeString, value)
	}
	if value, ok := csu.mutation.Gold(); ok {
		_spec.SetField(combinedsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedGold(); ok {
		_spec.AddField(combinedsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := csu.mutation.Silver(); ok {
		_spec.SetField(combinedsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedSilver(); ok {
		_spec.AddField(combinedsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := csu.mutation.Bronze(); ok {
		_spec.SetField(combinedsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedBronze(); ok {
		_spec.AddField(combinedsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := csu.mutation.Points(); ok {
		_spec.SetField(combinedsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedPoints(); ok {
		_spec.AddField(combinedsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := csu.mutation.TotalScore(); ok {
		_spec.SetField(combinedsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedTotalScore(); ok {
		_spec.AddField(combinedsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := csu.mutation.Population(); ok {
		_spec.SetField(combinedsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedPopulation(); ok {
		_spec.AddField(combinedsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := csu.mutation.PerCapita(); ok {
		_spec.SetField(combinedsport.FieldPerCapita, field.TypeFloat64, value)
	}
	if value, ok := csu.mutation.AddedPerCapita(); ok {
		_spec.AddField(combinedsport.FieldPerCapita, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{combinedsport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CombinedSportUpdateOne is the builder for updating a single CombinedSport entity.
type CombinedSportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CombinedSportMutation
}

// SetCountry sets the "country" field.
func (csuo *CombinedSportUpdateOne) SetCountry(s string) *CombinedSportUpdateOne {
	csuo.mutation.SetCountry(s)
	return csuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillableCountry(s *string) *CombinedSportUpdateOne {
	if s != nil {
		csuo.SetCountry(*s)
	}
	return csuo
}

// SetSport sets the "sport" field.
func (csuo *CombinedSportUpdateOne) SetSport(s string) *CombinedSportUpdateOne {
	csuo.mutation.SetSport(s)
	return csuo
}

// SetNillableSport sets the "sport" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillableSport(s *string) *CombinedSportUpdateOne {
	if s != nil {
		csuo.SetSport(*s)
	}
	return csuo
}

// SetGold sets the "gold" field.
func (csuo *CombinedSportUpdateOne) SetGold(i int) *CombinedSportUpdateOne {
	csuo.mutation.ResetGold()
	csuo.mutation.SetGold(i)
	return csuo
}

// SetNillableGold sets the "gold" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillableGold(i *int) *CombinedSportUpdateOne {
	if i != nil {
		csuo.SetGold(*i)
	}
	return csuo
}

// AddGold adds i to the "gold" field.
func (csuo *CombinedSportUpdateOne) AddGold(i int) *CombinedSportUpdateOne {
	csuo.mutation.AddGold(i)
	return csuo
}

// SetSilver sets the "silver" field.
func (csuo *CombinedSportUpdateOne) SetSilver(i int) *CombinedSportUpdateOne {
	csuo.mutation.ResetSilver()
	csuo.mutation.SetSilver(i)
	return csuo
}

// SetNillableSilver sets the "silver" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillableSilver(i *int) *CombinedSportUpdateOne {
	if i != nil {
		csuo.SetSilver(*i)
	}
	return csuo
}

// AddSilver adds i to the "silver" field.
func (csuo *CombinedSportUpdateOne) AddSilver(i int) *CombinedSportUpdateOne {
	csuo.mutation.AddSilver(i)
	return csuo
}

// SetBronze sets the "bronze" field.
func (csuo *CombinedSportUpdateOne) SetBronze(i int) *CombinedSportUpdateOne {
	csuo.mutation.ResetBronze()
	csuo.mutation.SetBronze(i)
	return csuo
}

// SetNillableBronze sets the "bronze" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillableBronze(i *int) *CombinedSportUpdateOne {
	if i != nil {
		csuo.SetBronze(*i)
	}
	return csuo
}

// AddBronze adds i to the "bronze" field.
func (csuo *CombinedSportUpdateOne) AddBronze(i int) *CombinedSportUpdateOne {
	csuo.mutation.AddBronze(i)
	return csuo
}

// SetPoints sets the "points" field.
func (csuo *CombinedSportUpdateOne) SetPoints(i int) *CombinedSportUpdateOne {
	csuo.mutation.ResetPoints()
	csuo.mutation.SetPoints(i)
	return csuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillablePoints(i *int) *CombinedSportUpdateOne {
	if i != nil {
		csuo.SetPoints(*i)
	}
	return csuo
}

// AddPoints adds i to the "points" field.
func (csuo *CombinedSportUpdateOne) AddPoints(i int) *CombinedSportUpdateOne {
	csuo.mutation.AddPoints(i)
	return csuo
}

// SetTotalScore sets the "total_score" field.
func (csuo *CombinedSportUpdateOne) SetTotalScore(i int) *CombinedSportUpdateOne {
	csuo.mutation.ResetTotalScore()
	csuo.mutation.SetTotalScore(i)
	return csuo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillableTotalScore(i *int) *CombinedSportUpdateOne {
	if i != nil {
		csuo.SetTotalScore(*i)
	}
	return csuo
}

// AddTotalScore adds i to the "total_score" field.
func (csuo *CombinedSportUpdateOne) AddTotalScore(i int) *CombinedSportUpdateOne {
	csuo.mutation.AddTotalScore(i)
	return csuo
}

// SetPopulation sets the "population" field.
func (csuo *CombinedSportUpdateOne) SetPopulation(i int) *CombinedSportUpdateOne {
	csuo.mutation.ResetPopulation()
	csuo.mutation.SetPopulation(i)
	return csuo
}

// SetNillablePopulation sets the "population" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillablePopulation(i *int) *CombinedSportUpdateOne {
	if i != nil {
		csuo.SetPopulation(*i)
	}
	return csuo
}

// AddPopulation adds i to the "population" field.
func (csuo *CombinedSportUpdateOne) AddPopulation(i int) *CombinedSportUpdateOne {
	csuo.mutation.AddPopulation(i)
	return csuo
}

// SetPerCapita sets the "per_capita" field.
func (csuo *CombinedSportUpdateOne) SetPerCapita(f float64) *CombinedSportUpdateOne {
	csuo.mutation.ResetPerCapita()
	csuo.mutation.SetPerCapita(f)
	return csuo
}

// SetNillablePerCapita sets the "per_capita" field if the given value is not nil.
func (csuo *CombinedSportUpdateOne) SetNillablePerCapita(f *float64) *CombinedSportUpdateOne {
	if f != nil {
		csuo.SetPerCapita(*f)
	}
	return csuo
}

// AddPerCapita adds f to the "per_capita" field.
func (csuo *CombinedSportUpdateOne) AddPerCapita(f float64) *CombinedSportUpdateOne {
	csuo.mutation.AddPerCapita(f)
	return csuo
}

// Mutation returns the CombinedSportMutation object of the builder.
func (csuo *CombinedSportUpdateOne) Mutation() *CombinedSportMutation {
	return csuo.mutation
}

// Where appends a list predicates to the CombinedSportUpdate builder.
func (csuo *CombinedSportUpdateOne) Where(ps ...predicate.CombinedSport) *CombinedSportUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CombinedSportUpdateOne) Select(field string, fields ...string) *CombinedSportUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CombinedSport entity.
func (csuo *CombinedSportUpdateOne) Save(ctx context.Context) (*CombinedSport, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CombinedSportUpdateOne) SaveX(ctx context.Context) *CombinedSport {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CombinedSportUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CombinedSportUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *CombinedSportUpdateOne) sqlSave(ctx context.Context) (_node *CombinedSport, err error) {
	_spec := sqlgraph.NewUpdateSpec(combinedsport.Table, combinedsport.Columns, sqlgraph.NewFieldSpec(combinedsport.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CombinedSport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, combinedsport.FieldID)
		for _, f := range fields {
			if !combinedsport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != combinedsport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Country(); ok {
		_spec.SetField(combinedsport.FieldCountry, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Sport(); ok {
		_spec.SetField(combinedsport.FieldSport, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Gold(); ok {
		_spec.SetField(combinedsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedGold(); ok {
		_spec.AddField(combinedsport.FieldGold, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.Silver(); ok {
		_spec.SetField(combinedsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedSilver(); ok {
		_spec.AddField(combinedsport.FieldSilver, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.Bronze(); ok {
		_spec.SetField(combinedsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedBronze(); ok {
		_spec.AddField(combinedsport.FieldBronze, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.Points(); ok {
		_spec.SetField(combinedsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedPoints(); ok {
		_spec.AddField(combinedsport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.TotalScore(); ok {
		_spec.SetField(combinedsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedTotalScore(); ok {
		_spec.AddField(combinedsport.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.Population(); ok {
		_spec.SetField(combinedsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedPopulation(); ok {
		_spec.AddField(combinedsport.FieldPopulation, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.PerCapita(); ok {
		_spec.SetField(combinedsport.FieldPerCapita, field.TypeFloat64, value)
	}
	if value, ok := csuo.mutation.AddedPerCapita(); ok {
		_spec.AddField(combinedsport.FieldPerCapita, field.TypeFloat64, value)
	}
	_node = &CombinedSport{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{combinedsport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
